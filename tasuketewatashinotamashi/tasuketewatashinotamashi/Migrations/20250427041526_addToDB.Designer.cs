// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tasuketewatashinotamashi.Models;

namespace tasuketewatashinotamashi.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250427041526_addToDB")]
    partial class addToDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("tasuketewatashinotamashi.Models.BusinessTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PersonId");

                    b.ToTable("BusinessTrips");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameCountry")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("NameOrganisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TaxNumber")
                        .IsUnique()
                        .HasFilter("[TaxNumber] IS NOT NULL");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AndName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<int?>("StreetId")
                        .HasColumnType("int");

                    b.Property<int?>("SubunitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("StreetId");

                    b.HasIndex("SubunitId");

                    b.HasIndex("LastName", "FirstName", "AndName");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NamePosition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameSpeciality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("NameStreet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Subunit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameSubunit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subunits");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Workbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeDismissal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeReception")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dismissal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWordbook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PositionId");

                    b.ToTable("Workbooks");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.BusinessTrip", b =>
                {
                    b.HasOne("tasuketewatashinotamashi.Models.City", "City")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("CityId");

                    b.HasOne("tasuketewatashinotamashi.Models.Country", "Country")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("CountryId");

                    b.HasOne("tasuketewatashinotamashi.Models.Person", "Person")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("PersonId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.City", b =>
                {
                    b.HasOne("tasuketewatashinotamashi.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Organisation", b =>
                {
                    b.HasOne("tasuketewatashinotamashi.Models.City", "City")
                        .WithMany("Organisations")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Person", b =>
                {
                    b.HasOne("tasuketewatashinotamashi.Models.City", "City")
                        .WithMany("Persons")
                        .HasForeignKey("CityId");

                    b.HasOne("tasuketewatashinotamashi.Models.Country", "Country")
                        .WithMany("Persons")
                        .HasForeignKey("CountryId");

                    b.HasOne("tasuketewatashinotamashi.Models.Position", "Position")
                        .WithMany("Persons")
                        .HasForeignKey("PositionId");

                    b.HasOne("tasuketewatashinotamashi.Models.Speciality", "Speciality")
                        .WithMany("Persons")
                        .HasForeignKey("SpecialityId");

                    b.HasOne("tasuketewatashinotamashi.Models.Street", null)
                        .WithMany("Persons")
                        .HasForeignKey("StreetId");

                    b.HasOne("tasuketewatashinotamashi.Models.Subunit", "Subunit")
                        .WithMany("Persons")
                        .HasForeignKey("SubunitId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Position");

                    b.Navigation("Speciality");

                    b.Navigation("Subunit");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Street", b =>
                {
                    b.HasOne("tasuketewatashinotamashi.Models.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Workbook", b =>
                {
                    b.HasOne("tasuketewatashinotamashi.Models.Organisation", "Organisation")
                        .WithMany("Workbooks")
                        .HasForeignKey("OrganisationId");

                    b.HasOne("tasuketewatashinotamashi.Models.Person", "Person")
                        .WithMany("Workbooks")
                        .HasForeignKey("PersonId");

                    b.HasOne("tasuketewatashinotamashi.Models.Position", "Position")
                        .WithMany("Workbooks")
                        .HasForeignKey("PositionId");

                    b.Navigation("Organisation");

                    b.Navigation("Person");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.City", b =>
                {
                    b.Navigation("BusinessTrips");

                    b.Navigation("Organisations");

                    b.Navigation("Persons");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Country", b =>
                {
                    b.Navigation("BusinessTrips");

                    b.Navigation("Cities");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Organisation", b =>
                {
                    b.Navigation("Workbooks");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Person", b =>
                {
                    b.Navigation("BusinessTrips");

                    b.Navigation("Workbooks");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Position", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("Workbooks");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Speciality", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Street", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("tasuketewatashinotamashi.Models.Subunit", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
